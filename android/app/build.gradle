def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    // ndkVersion "21.4.7075529"

    compileSdkVersion 33
    ndkVersion flutter.ndkVersion

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.fluxbiz.app"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
       release {
           keyAlias System.getenv('KEYSTOREALIAS')
           keyPassword System.getenv('KEYSTOREPASSWORD')
           storeFile System.getenv('KEYSTOREFILE') ? file(System.getenv('KEYSTOREFILE')) : null
           storePassword System.getenv('KEYSTOREPASSWORD')
       }
   }

    buildTypes {
        release {
            // Use env to detect if it's debug or release
            if (System.getenv("KEYSTOREALIAS") == null) {
                signingConfig signingConfigs.debug
            } else {
                signingConfig signingConfigs.release

                // https://github.com/flutter/flutter/issues/18232
                applicationVariants.all { variant ->
                    variant.outputs.all { output ->
                        // For apk without --split-per-abi
                        output.outputFileName = "app-release.apk"
                        // For apk with --split-per-abi
                        //output.outputFileName = "app-" + output.getFilter(com.android.build.OutputFile.ABI) + "-release.apk";
                    }
                }
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    
    // Required for firebase messaging
    implementation 'com.google.firebase:firebase-messaging:20.2.0'
}

apply plugin: 'com.google.gms.google-services'